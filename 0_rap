from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from werkzeug.security import generate_password_hash, check_password_hash

app = Flask(__name__)
CORS(app)

# Configure database and JWT
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///recipe_manager.db'
app.config['JWT_SECRET_KEY'] = 'supersecretkey'  # Change this to a real secret in production

db = SQLAlchemy(app)
jwt = JWTManager(app)

# User and Recipe Models
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)

class Recipe(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    ingredients = db.Column(db.Text, nullable=False)
    instructions = db.Column(db.Text, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    user = db.relationship('User', backref=db.backref('recipes', lazy=True))

# Create the database
with app.app_context():
    db.create_all()

# Registration Endpoint
@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data['username']
    email = data['email']
    password = data['password']
    
    if User.query.filter_by(username=username).first() or User.query.filter_by(email=email).first():
        return jsonify({'message': 'User already exists'}), 400
    
    hashed_password = generate_password_hash(password, method='sha256')
    new_user = User(username=username, email=email, password=hashed_password)
    db.session.add(new_user)
    db.session.commit()
    
    return jsonify({'message': 'User registered successfully'}), 201

# Login Endpoint
@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data['username']
    password = data['password']
    
    user = User.query.filter_by(username=username).first()
    if user and check_password_hash(user.password, password):
        access_token = create_access_token(identity={'user_id': user.id})
        return jsonify(access_token=access_token), 200
    
    return jsonify({'message': 'Invalid credentials'}), 401

# Get Recipes (for the authenticated user)
@app.route('/recipes', methods=['GET'])
@jwt_required()
def get_recipes():
    current_user_id = get_jwt_identity()['user_id']
    recipes = Recipe.query.filter_by(user_id=current_user_id).all()
    return jsonify([{
        'id': r.id,
        'title': r.title,
        'ingredients': r.ingredients,
        'instructions': r.instructions
    } for r in recipes])

# Create Recipe
@app.route('/recipes', methods=['POST'])
@jwt_required()
def create_recipe():
    current_user_id = get_jwt_identity()['user_id']
    data = request.get_json()
    
    new_recipe = Recipe(
        title=data['title'],
        ingredients=data['ingredients'],
        instructions=data['instructions'],
        user_id=current_user_id
    )
    db.session.add(new_recipe)
    db.session.commit()
    
    return jsonify({'message': 'Recipe created successfully'}), 201

# Update Recipe
@app.route('/recipes/<int:recipe_id>', methods=['PUT'])
@jwt_required()
def update_recipe(recipe_id):
    current_user_id = get_jwt_identity()['user_id']
    recipe = Recipe.query.get(recipe_id)
    
    if not recipe or recipe.user_id != current_user_id:
        return jsonify({'message': 'Not authorized or recipe not found'}), 403
    
    data = request.get_json()
    recipe.title = data['title']
    recipe.ingredients = data['ingredients']
    recipe.instructions = data['instructions']
    db.session.commit()
    
    return jsonify({'message': 'Recipe updated successfully'}), 200

# Delete Recipe
@app.route('/recipes/<int:recipe_id>', methods=['DELETE'])
@jwt_required()
def delete_recipe(recipe_id):
    current_user_id = get_jwt_identity()['user_id']
    recipe = Recipe.query.get(recipe_id)
    
    if not recipe or recipe.user_id != current_user_id:
        return jsonify({'message': 'Not authorized or recipe not found'}), 403
    
    db.session.delete(recipe)
    db.session.commit()
    
    return jsonify({'message': 'Recipe deleted successfully'}), 200

if __name__ == '__main__':
    app.run(debug=True)
