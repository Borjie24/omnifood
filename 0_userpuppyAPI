from flask import Blueprint, request, jsonify
from src.setup_db_example.database import db
from src.setup_db_example.models.m_user import UserDb
from src.setup_db_example.models.m_puppy import PuppyDb
from src.setup_db_example.schemas.s_user import UserSchema
from src.setup_db_example.schemas.s_puppy import PuppySchema

user_db_router = Blueprint("user_api", __name__)

# Initialize schemas
user_schema = UserSchema()
puppy_schema = PuppySchema()
puppies_schema = PuppySchema(many=True)


# Sample endpoint
@user_db_router.route("/api/get-sample", methods=["GET"])
def sample_read():
    return {"message": "sample"}


# Register a new user
@user_db_router.route("/api/register", methods=["POST"])
def register_user():
    try:
        data = request.get_json()
        # Validate and deserialize input
        new_user = user_schema.load(data)
        db.session.add(new_user)
        db.session.commit()
        return jsonify(user_schema.dump(new_user)), 201
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 400


# User login
@user_db_router.route("/api/login", methods=["POST"])
def login_user():
    data = request.get_json()
    user_email = data.get("user_email")
    user_password = data.get("user_password")

    # Validate user credentials
    user = UserDb.query.filter_by(user_email=user_email, user_password=user_password).first()
    if user:
        return jsonify({"message": "Login successful", "user_id": user.user_id}), 200
    else:
        return jsonify({"error": "Invalid email or password"}), 401


# List all puppies
@user_db_router.route("/api/puppies", methods=["GET"])
def list_puppies():
    puppies = PuppyDb.query.all()
    return jsonify(puppies_schema.dump(puppies)), 200


from werkzeug.security import generate_password_hash, check_password_hash

hashed_password = generate_password_hash(password, method='sha256')
check_password_hash(hashed_password, password)

-------------------
@user_db_router.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Not found"}), 404
-----------------
@user_db_router.route("/api/puppies", methods=["GET"])
def list_puppies():
    is_adopted = request.args.get("is_adopted")
    if is_adopted is not None:
        puppies = PuppyDb.query.filter_by(is_adopted=is_adopted).all()
    else:
        puppies = PuppyDb.query.all()
    return jsonify(puppies_schema.dump(puppies)), 200
-------------------------------------------
from flask import Blueprint, request, jsonify
from src.setup_db_example.database import db
from src.setup_db_example.models.m_puppy import PuppyDb
from src.setup_db_example.schemas.s_puppy import PuppySchema

puppy_db_router = Blueprint("puppy_api", __name__)

# Initialize schema
puppy_schema = PuppySchema()
puppies_schema = PuppySchema(many=True)

# Sample route
@puppy_db_router.route("/api/get-sample", methods=["GET"])
def sample_read():
    return {"message": "sample"}

# Get all puppies
@puppy_db_router.route("/api/puppies", methods=["GET"])
def get_all_puppies():
    try:
        puppies = PuppyDb.query.all()
        return jsonify(puppies_schema.dump(puppies)), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Add a new puppy
@puppy_db_router.route("/api/puppy", methods=["POST"])
def add_puppy():
    try:
        data = request.get_json()
        # Validate and deserialize input
        new_puppy = puppy_schema.load(data)
        db.session.add(new_puppy)
        db.session.commit()
        return jsonify(puppy_schema.dump(new_puppy)), 201
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 400

# Delete a puppy
@puppy_db_router.route("/api/puppy/<int:puppy_id>", methods=["DELETE"])
def delete_puppy(puppy_id):
    try:
        puppy = PuppyDb.query.get(puppy_id)
        if not puppy:
            return jsonify({"error": "Puppy not found"}), 404
        db.session.delete(puppy)
        db.session.commit()
        return jsonify({"message": f"Puppy with ID {puppy_id} deleted"}), 200
    except Exception as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500


