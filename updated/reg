isError: false,

formValidity() {
  // Define your validation rules in an array
  const validationRules = [
    { field: 'nickname', pattern: this.nicknamePattern, message: 'Invalid nickname', value: this.input.nickname },
    { field: 'fullname', pattern: this.fullnamePattern, message: 'Invalid fullname', value: this.input.fullname },
    { field: 'email', pattern: this.emailPattern, message: 'Invalid email', value: this.input.email },
    { field: 'loveLanguage', condition: this.input.loveLanguage !== 3, message: 'Choose love language' },
    { field: 'zodiacSign', condition: this.input.zodiacSign === '', message: 'Choose zodiac sign' },
    { field: 'motto', condition: this.input.motto.trim() === '', message: 'Write your motto' }
  ];

  // Process validation rules
  validationRules
    .map(rule => rule.pattern 
      ? (rule.value.trim() === '' || !rule.pattern.test(rule.value)) && rule.message 
      : rule.condition && rule.message
    )
    .filter(Boolean)
    .forEach(alertMessage => {
      alert(alertMessage);
      this.isError = true;
    });
}


----------------------------

methods: {
  formValidity() {
    // Reset error flag before validation
    this.isError = false;

    // Define your validation rules in an array
    const validationRules = [
      { field: 'nickname', pattern: this.nicknamePattern, message: 'Invalid nickname', value: this.input.nickname },
      { field: 'fullname', pattern: this.fullnamePattern, message: 'Invalid fullname', value: this.input.fullname },
      { field: 'email', pattern: this.emailPattern, message: 'Invalid email', value: this.input.email },
      { field: 'loveLanguage', condition: this.input.loveLanguage !== 3, message: 'Choose love language' },
      { field: 'zodiacSign', condition: this.input.zodiacSign === '', message: 'Choose zodiac sign' },
      { field: 'motto', condition: this.input.motto.trim() === '', message: 'Write your motto' }
    ];

    // Collect all validation errors
    const errors = validationRules
      .map(rule => {
        if (rule.pattern) {
          return (rule.value.trim() === '' || !rule.pattern.test(rule.value)) ? rule.message : null;
        }
        return rule.condition ? rule.message : null;
      })
      .filter(Boolean); // Keep only the messages that are not null

    // Check if there are any errors
    if (errors.length > 0) {
      // Show all errors at once in an alert or display on the UI
      alert(errors.join('\n')); 
      this.isError = true;
    } else {
      // If no errors, the form is valid
      this.isError = false;
    }
  }
}
