<template>
  <div>
    <b-form-group
      id="fieldset-1"
      description="Let us know your name."
      label="Enter your name"
      label-for="input-1"
      valid-feedback="Thank you!"
      :invalid-feedback="invalidFeedback"
      :state="state"
    >
      <b-form-input
        id="input-1"
        v-model="limitedName"
        :state="state"
      trim
        maxlength="10"
      ></b-form-input>
    </b-form-group>
    <p>{{ remainingCharacters }} characters left</p>
  </div>
</template>

<script>
export default {
  data() {
    return {
      name: '',
      maxChars: 10,
      state: null,
      invalidFeedback: "Invalid input"
    };
  },
  computed: {
    limitedName: {
      get() {
        return this.name;
      },
      set(value) {
        if (value.length <= this.maxChars) {
          this.name = value;
        }
      }
    },
    remainingCharacters() {
      return this.maxChars - this.name.length;
    }
  }
};
</script>
<template>
  <div>
    <b-form-input 
      v-model="number" 
      placeholder="Enter your Age" 
      type="text" 
      @input="limitInput"
    ></b-form-input>
    <div class="mt-2">Value: {{ number }}</div>
    <b-button @click="submit">Submit</b-button>
    <div v-if="errorMessage" class="mt-2 text-danger">{{ errorMessage }}</div>
  </div>
</template>

<script>
  export default {
    data() {
      return {
        number: '',
        errorMessage: ''
      }
    },
    methods: {
      limitInput(event) {
        let value = event.target.value;

        // Remove any non-numeric characters
        value = value.replace(/\D/g, '');

        // Limit to 2 digits
        if (value.length > 2) {
          value = value.slice(0, 2);
        }
        
        this.number = value;
      },
      submit() {
        const numericValue = parseInt(this.number, 10);

        if (isNaN(numericValue) || this.number === '') {
          this.errorMessage = 'Please enter a valid number.';
        } else if (numericValue < 18) {
          this.errorMessage = 'Age must be at least 18.';
        } else if (numericValue > 99) {
          this.errorMessage = 'Age cannot exceed 99.';
        } else {
          this.errorMessage = '';
          // Handle successful submission here
          alert('Form submitted successfully!');
        }
      }
    }
  }
</script>

<style scoped>
.text-danger {
  color: red;
}
</style>

<template>
  <div>
    <b-form-input 
      v-model="phoneNumber" 
      placeholder="Enter your Phone Number" 
      type="text" 
      @input="formatPhoneNumber"
    ></b-form-input>
    <div class="mt-2">Value: {{ phoneNumber }}</div>
    <b-button @click="submit">Submit</b-button>
    <div v-if="errorMessage" class="mt-2 text-danger">{{ errorMessage }}</div>
  </div>
</template>

<script>
  export default {
    data() {
      return {
        phoneNumber: '',
        errorMessage: ''
      }
    },
    methods: {
      formatPhoneNumber(event) {
        let value = event.target.value;

        // Remove non-numeric characters
        value = value.replace(/\D/g, '');

        // Limit to 11 digits (without country code)
        if (value.length > 11) {
          value = value.slice(0, 11);
        }

        // Optionally add a prefix
        if (value.startsWith('9') && value.length === 11) {
          value = '+63' + value;
        } else if (value.startsWith('0')) {
          value = '+63' + value.slice(1);
        }
        
        this.phoneNumber = value;
      },
      submit() {
        const phoneRegex = /^\+639\d{9}$/;

        if (!phoneRegex.test(this.phoneNumber)) {
          this.errorMessage = 'Please enter a valid Philippine cellphone number.';
        } else {
          this.errorMessage = '';
          // Handle successful submission here
          alert('Form submitted successfully!');
        }
      }
    }
  }
</script>

<style scoped>
.text-danger {
  color: red;
}
</style>

